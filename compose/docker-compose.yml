version: "2.1"
services:
  front:
    image: armandcd/sae_edt_fabjm_front_app:1.0.1
    restart: always
    ports:
      - "4200:4200"
    depends_on:
        db:
            condition: service_healthy

  back :
    image: armandcd/sae_edt_fabjm_back_app:1.0.1
    restart: always
    ports:
      - "5050:5050"
    depends_on:
      db:
        condition: service_healthy

  sonarqube:
    image: armandcd/sae_edt_fabjm_sonarqube_app:latest
    hostname: sonarqube
    container_name: sonarqube
    depends_on:
      db:
        condition: service_healthy
      back:
        condition: service_started
      front:
        condition: service_started
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/database
      SONAR_JDBC_USERNAME: postgres
      SONAR_JDBC_PASSWORD: postgres
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:9000/api/system/status" ]
      interval: 30s
      timeout: 10s
      retries: 5

  sonarscanner_back:
    image: sonarsource/sonar-scanner-cli:latest
    volumes:
      - ./app/back:/usr/src
    command: sonar-scanner -X -Dsonar.projectBaseDir=/usr/src
    depends_on:
      sonarqube:
        condition: service_healthy
      back:
        condition: service_started


  sonarscanner_front:
    image: sonarsource/sonar-scanner-cli:latest
    volumes:
      - ./app/front/api-front:/usr/src
    command: sonar-scanner -X -Dsonar.projectBaseDir=/usr/src
    depends_on:
      sonarqube:
        condition: service_healthy
      front:
        condition: service_started
      sonarscanner_back:
        condition: service_completed_successfully

  db:
    image: armandcd/sae_edt_fabjm_db_app:latest
    restart: always
    ports:
      - "5432:5432"
    hostname: postgresql
    container_name: postgresql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: database
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./database/SQL_script/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgresql_data:/var/lib/postgresql/data

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql_data:
